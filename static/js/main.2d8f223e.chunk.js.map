{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Alert/Alert.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Logo/Logo.module.css","components/Button/Button.module.css","App.module.css","redux/contacts/actions.js","components/Button/Button.js","components/Alert/Alert.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Logo/Logo.js","App.js","redux/contacts/reducer.js","redux/store.js","index.js"],"names":["module","exports","contactsActions","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","Button","label","type","onClick","className","s","button","AlertMessage","message","container","textMessage","ContactForm","state","error","nameInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","items","some","item","setTimeout","onSubmit","reset","this","contactsForm","htmlFor","labelForm","contactInput","onChange","CSSTransition","in","timeout","classNames","styleAlert","unmountOnExit","Alert","React","Component","connect","contacts","dispatch","filter","allContacts","toLowerCase","includes","getFilterContacts","onDelete","TransitionGroup","component","map","contactList","contactText","onChangeFilter","e","target","length","labelFilter","filterInput","Logo","appear","srtyles","logo","App","createReducer","actions","action","contact","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","contactsStore","persistor","persistStore","ReactDOM","render","loading","document","querySelector"],"mappings":"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","file":"static/js/main.2d8f223e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsForm\":\"ContactForm_contactsForm__fhhL_\",\"labelForm\":\"ContactForm_labelForm__2hEbx\",\"contactInput\":\"ContactForm_contactInput__3VtPb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Alert_container__1Bhym\",\"textMessage\":\"Alert_textMessage__9-lQc\",\"enter\":\"Alert_enter__2I7G3\",\"enterActive\":\"Alert_enterActive__1PvPC\",\"exit\":\"Alert_exit__1b1h-\",\"exitActive\":\"Alert_exitActive__1LYj3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1-A6q\",\"contactText\":\"ContactList_contactText__3fwrV\",\"enter\":\"ContactList_enter__26HBW\",\"enterActive\":\"ContactList_enterActive__3BPjP\",\"exit\":\"ContactList_exit__3cB1N\",\"exitActive\":\"ContactList_exitActive__2TuZk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__1a3Pw\",\"labelFilter\":\"Filter_labelFilter__2UFWp\",\"filterInput\":\"Filter_filterInput__2epdf\",\"enter\":\"Filter_enter__-bK6U\",\"enterActive\":\"Filter_enterActive__3q-FJ\",\"exit\":\"Filter_exit__1Ny_k\",\"exitActive\":\"Filter_exitActive__330ig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__R-Cnd\",\"appear\":\"Logo_appear__2LiMj\",\"appearActive\":\"Logo_appearActive__gtL6g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3ARpE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1LOeK\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts/add', (name, number) => {\r\n    return {\r\n        payload: {\r\n            id: shortid.generate(),\r\n            name,\r\n            number,\r\n        },\r\n    };\r\n});\r\n\r\n\r\nconst deleteContact=createAction('contacts/delete')\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst contactsActions = { addContact, deleteContact, changeFilter };\r\n\r\nexport default contactsActions;\r\n","import React from 'react';\r\nimport s from '../Button/Button.module.css';\r\n\r\nconst Button = ({ label, type = 'button', onClick = () => null }) => (\r\n  <button className={s.button} type={type} onClick={onClick}>\r\n    {label}\r\n  </button>\r\n);\r\n\r\nexport default Button;","import React from 'react';\r\nimport s from '../Alert/Alert.module.css'\r\n\r\nconst AlertMessage = ({ message }) => (\r\n   \r\n    <div className={s.container}>\r\n        <p className={s.textMessage}>{ message}</p>\r\n    </div>  \r\n    \r\n);\r\n\r\nexport default AlertMessage;","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/actions';\r\nimport shortid from 'shortid';\r\nimport Button from '../Button/Button';\r\nimport AlertMessage from '../Alert/Alert';\r\nimport styleAlert from '../Alert/Alert.module.css';\r\nimport s from '../ContactForm/ContactForm.module.css';\r\n\r\nclass ContactForm extends React.Component { \r\n    state = {\r\n        name: '',\r\n        number: '',\r\n        error: false,\r\n        message: '',\r\n    };\r\n    nameInputId = shortid.generate();\r\n\r\n    handleChange = event => {\r\n    const { name,value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (this.state.name === '') {\r\n     this.setState({ error: true, message: 'Please enter contact name' }) || setTimeout(() => {\r\n        this.setState({ error: false });\r\n      }, 2000)\r\n\r\n      return;\r\n        }\r\n         if (this.state.number === '') { \r\n      \r\n      this.setState({ error: true, message: 'Please enter contact number' }) || setTimeout(() => {\r\n        this.setState({ error: false });\r\n      }, 2000)\r\n\r\n      return;\r\n        }\r\n        \r\n       if (this.props.items.some((item) => item.name === this.state.name)){ \r\n            this.setState({ error: true, message: `${this.state.name} is already in contacts!` }) || setTimeout(() => {\r\n        this.setState({ error: false });\r\n            }, 2000)\r\n            return;\r\n        }\r\n    \r\n        this.props.onSubmit(this.state.name, this.state.number);\r\n        this.reset();\r\n    };\r\n    reset = () => { \r\n        this.setState({name: '', number: ''});\r\n        };\r\n\r\n    render() { \r\n        const {name, number, error, message } = this.state;\r\n        return (\r\n            <form className={ s.contactsForm} onSubmit={this.handleSubmit}>\r\n                <label htmlFor={this.nameInputId} className={ s.labelForm}>  \r\n                    Name\r\n           <br />\r\n                    <input\r\n                    className={ s.contactInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChange}\r\n                        id={this.nameInputId} />\r\n                </label>\r\n                <br/>\r\n                <label className={ s.labelForm}>\r\n                    Number\r\n                     <br />\r\n            <input\r\n                    className={ s.contactInput}\r\n                    type=\"text\"\r\n                    name=\"number\"\r\n                    value={number}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n                <Button label=\"Add contact\" type=\"submit\" />\r\n                \r\n                <CSSTransition\r\n                    in={error}\r\n                    timeout={250}\r\n                    classNames={styleAlert}\r\n                    unmountOnExit>\r\n                    <AlertMessage message={ message}/>\r\n                </CSSTransition>\r\n\r\n            </form>   \r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    items: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: ( name, number ) => dispatch(contactsActions.addContact( name, number )),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/actions';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport Button from '../Button/Button';\r\nimport s from '../ContactList/ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDelete}) => {\r\n    return (\r\n        <TransitionGroup component=\"ul\">\r\n            {contacts.map(({ id, name, number }) => (\r\n                <CSSTransition key={id} timeout={250} classNames={s}>\r\n                    <li className={s.contactList} /*key={id}*/ id={ id}>\r\n                        <p className={s.contactText}>{name}</p>\r\n                        <p className={s.contactText}>{number}</p>\r\n                        <Button label=\"Delete\" onClick={() => onDelete(id)} />\r\n                    </li>\r\n                </CSSTransition>\r\n            ))}\r\n            </TransitionGroup>\r\n    );\r\n};\r\nconst getFilterContacts = (allContacts, filter ) => {\r\n    return allContacts.filter(({name}) =>\r\n        name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\nconst mapStateToProps = state => {\r\n    const { filter, items } = state.contacts;\r\n    const filterContacts= getFilterContacts(items, filter)\r\n    \r\n    return {\r\n        contacts: filterContacts,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDelete: (id) => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/actions';\r\nimport s from '../Filter/Filter.module.css';\r\n\r\nconst Filter = ({ items, name, onChangeFilter}) =>(\r\n\r\n     <CSSTransition\r\n            in={items.length >= 2}\r\n            timeout={250}\r\n            classNames={s}\r\n         unmountOnExit>\r\n        <div className={s.container}>\r\n            <label className={ s.labelFilter}>Find contacts by name\r\n             <br/>\r\n             <input className={s.filterInput}\r\n                 type=\"text\"\r\n                 value={name}\r\n                 onChange={onChangeFilter} />\r\n            </label>    \r\n         </div>\r\n        </CSSTransition>\r\n    \r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    name: state.contacts.filter,\r\n    items: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   onChangeFilter: e=>dispatch(contactsActions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport srtyles from '../Logo/Logo.module.css';\r\n\r\nconst Logo = () => (\r\n    <CSSTransition\r\n        in={true}\r\n        appear={true}\r\n        timeout={ 500}\r\n        classNames={srtyles}\r\n        >\r\n    <header>\r\n        <h1 className={srtyles.logo}>Phonebook</h1>\r\n    </header>\r\n       </CSSTransition>\r\n);\r\n\r\nexport default Logo;","import React from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList'\nimport Filter from './components/Filter/Filter';\nimport Logo from './components/Logo/Logo';\nimport s from './App.module.css';\n\nconst App = () => {\n  return (\n      \n    <div>\n      <Logo />\n      <div className={s.container}>\n        <ContactForm />\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n     \n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './actions';\r\n \r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, action) => [action.payload, ...state],\r\n    [actions.deleteContact]: (state, action) => state.filter(contact => contact.id !== action.payload)\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter\r\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { persistStore, persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/reducer';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist:['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n},\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst contactsStore = { persistor, store };\r\n\r\nexport default contactsStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport contactsStore from './redux/store';\n\n\n\nReactDOM.render(\n    <Provider store={contactsStore.store}>\n        <PersistGate loading={null} persistor={ contactsStore.persistor}>\n            <App />\n        </PersistGate>\n    </Provider>,\n    document.querySelector('#root')\n);\n\n\n\n"],"sourceRoot":""}